package hrms.service;

import hrms.domain.Company;
import hrms.domain.Department;
import hrms.domain.Employee;
import hrms.dto.EmployeeDTO;
import hrms.repository.CompanyRepository;
import hrms.repository.DepartmentRepository;
import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Autowired;
import hrms.repository.EmployeeRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.Optional;

@Service
@Log4j2
@Transactional(rollbackOn = Exception.class)
@EnableAsync
public class EmployeeServiceImpl implements EmployeeService{
    // This means to get the bean called employeeRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired private EmployeeRepository employeeRepository;
    @Autowired private DepartmentRepository departmentRepository;
    @Autowired private CompanyRepository companyRepository;

    public void add(EmployeeDTO emp) {
        log.trace("");
        Employee employee = new Employee();
        Integer id=employeeRepository.findLastId().get(0).getEmployeeId();
        id = id + 1;
        employee.setEmployeeId(id);
        employee.setEmployeeName(emp.getEmployeeName());
        employee.setEmployeeEmail(emp.getEmployeeEmail());
        employee.setEmployeePhone(emp.getEmployeePhone());
        employee.setEmployeeUsername(emp.getEmployeeUsername());
        employee.setEmployeePassword(emp.getEmployeePassword());
        employee.setEmployeeBasicPay(emp.getEmployeeBasicPay());
        employee.setEmployeeRole(emp.getEmployeeRole());
        Optional<Company> c=companyRepository.findById(emp.getCompanyId());
        employee.setCompany(c.get());
        Optional<Department> d=departmentRepository.findById(emp.getDepartmentId());
        employee.setDepartment(d.get());
        employeeRepository.save(employee);
    }

    public Page<Employee> getAll(Pageable pageable) {
//        return new PageRequest(1, 10, Sort.Direction.ASC, "title", "description");
        return employeeRepository.findAll(pageable);
    }
    public Optional<Employee> get(Integer id)
    {
        return employeeRepository.findById(id);
    }
    @Async
    public void remove(Integer id)
    {
        employeeRepository.deleteById(id);
    }

    @Override @Async
    public void update(Integer id, EmployeeDTO emp) {
        Optional<Employee> temp = employeeRepository.findById(id);
        Employee employee=temp.get();
        employee.setEmployeeName(emp.getEmployeeName());
        employee.setEmployeeEmail(emp.getEmployeeEmail());
        employee.setEmployeePhone(emp.getEmployeePhone());
        employee.setEmployeeUsername(emp.getEmployeeUsername());
        employee.setEmployeePassword(emp.getEmployeePassword());
        employee.setEmployeeBasicPay(emp.getEmployeeBasicPay());
        employee.setEmployeeRole(emp.getEmployeeRole());
        Optional<Company> c=companyRepository.findById(emp.getCompanyId());
        employee.setCompany(c.get());
        Optional<Department> d=departmentRepository.findById(emp.getDepartmentId());
        employee.setDepartment(d.get());
        employeeRepository.save(employee);
    }
}